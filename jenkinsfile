pipeline {
  agent { label 'MAV_server' }

  environment {
	AWS_CREDS_ID = "${env.AWS_CREDENTIALS_ID}"
    GITHUB_CREDS = "${env.GITHUB_CREDENTIALS_ID}"
    PRIVATE_KEY_ID = "${env.PRIVATE_KEY_ID}"
    DOCKER_IMAGE = 'wealliam/maverick-reg/mav-app:latest'
    HOST_PORT = '80'
    CONTAINER_PORT = '10000'
  }

  stages {

    stage('Clone App and Infra Repos') {
      steps {
        dir('app') {
          checkout([
            $class: 'GitSCM',
            branches: [[name: '*/master']],
            userRemoteConfigs: [[
              url: 'https://github.com/weal-liam/aws-hosting-project.git',
              credentialsId: "${GITHUB_CREDS}"
            ]]
          ])
        }
        dir('infra') {
          checkout([
            $class: 'GitSCM',
            branches: [[name: '*/main']],
            userRemoteConfigs: [[
              url: 'https://github.com/weal-liam/MaverickServer-IAC-Config.git',
              credentialsId: "${GITHUB_CREDS}"
            ]]
          ])
        }
      }
    }

  stage('Terraform Init & Apply') {
  steps {
    script {
      withCredentials([
        [$class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: "${AWS_CREDS_ID}",
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
      ]) {
          dir('infra/terraform') {
            sh '''
              terraform init
              terraform apply -auto-approve
              terraform output -json > ../../kube-output.json
              ls -l ../../kube-output.json || true
              cat ../../kube-output.json || true
            '''
          }
      }
    }
  }
}

    stage('Configure kubectl') {
      steps {
        script {
          def output = readJSON file: 'kube-output.json'
          def token = output.cluster_token.value
          def cert = output.cluster_CA.value
          def ec2_endpoint = output.kubeconfig.value

          writeFile file: 'kubeconfig.yml', text: """
apiVersion: v1
clusters:
- cluster:
    server: https://${ec2_endpoint}
    certificate-authority-data: ${cert}
  name: custom-eks
contexts:
- context:
    cluster: custom-eks
    user: admin
  name: custom-context
current-context: custom-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    token: ${token}
"""
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('app') {
          sh 'docker build -t mav-app:latest .'
        }
      }
    }

    stage('Push to Docker Desktop') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag mav-app:latest wealliam/maverick-reg/mav-app:latest
            docker push wealliam/maverick-reg/mav-app:latest
          '''
        }
      }
    }

    stage('Run Ansible Playbook') {
      steps {
        dir('infra/ansible') {
          sshagent(["$PRIVATE_KEY_ID"]) {
            script {
              def output = readJSON file: '../../kube-output.json'
              def instance_ip = output.maverick_server_public_ip.value

              // Dynamically create inventory.ini with the actual IP
              writeFile file: 'inventory.ini', text: """
[web]
${instance_ip} ansible_user=ubuntu
"""

              sh 'ansible-playbook -i inventory.ini playbook.yml --extra-vars "docker_image=${DOCKER_IMAGE} host_port=${HOST_PORT} container_port=${CONTAINER_PORT}"'
            }
          }
        }
      }
    }

    stage('Deploy to EKS') {
      steps {
        sh '''
          KUBECONFIG=kubeconfig.yml kubectl apply -f app/deployment.yaml
          KUBECONFIG=kubeconfig.yml kubectl apply -f app/service.yaml
          KUBECONFIG=kubeconfig.yml kubectl apply -f ngnix/ingress.yaml
          KUBECONFIG=kubeconfig.yml kubectl rollout status deployment MAV-app
          KUBECONFIG=kubeconfig.yml kubectl get pods
        '''
      }
    }

    stage('Cleanup Docker') {
      steps {
        script {
          echo "Cleaning up Docker resources..."
          sh '''
            docker ps -a --filter "ancestor=mav-app:latest" -q | xargs -r docker rm -f
            docker ps -a --filter "ancestor=wealliam/maverick-reg/mav-app:latest" -q | xargs -r docker rm -f
            docker rmi -f mav-app:latest || true
            docker rmi -f wealliam/maverick-reg/mav-app:latest || true
            docker container prune -f
            docker image prune -f --filter "until=24h"
            docker volume prune -f
            docker network prune -f
          '''
        }
      }
    }

    stage('Cleanup Sensitive Files') {
      steps {
        script {
          echo "Removing temporary files..."
          sh 'rm -f kubeconfig.yml || true'
          sh 'rm -f kube-output.json || true'
        }
      }
    }

  }

  post {
    success {
      echo "Deployment to EKS successful!"
    }
    failure {
      echo "Pipeline failed. Check logs for details."
    }
  }
}
