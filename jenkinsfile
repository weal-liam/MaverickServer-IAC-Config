pipeline {
  agent {label "MAVERICK_server"}

  environment {
    DOCKER_IMAGE = 'wealliam/maverick-reg/MAV-app:latest'
    HOST_PORT = '80'
    CONTAINER_PORT = '10000'
  }

  stages {
    stage('Clone App and Infra Repos') {
      steps {
        dir('app') {
          git url: 'https://github.com/weal-liam/aws-hosting-project.git', branch: 'main'
        }
        dir('infra') {
          git url: 'https://github.com/weal-liam/MaverickServer-IAC-Config.git', branch: 'main'
        }
      }
    }

    stage('Terraform Init & Apply') {
      steps {
        dir('infra/terraform') {
          sh 'terraform init'
          sh 'terraform apply -auto-approve'
          sh 'terraform output -json > ../../kube-output.json'
        }
      }
    }

    stage('Configure kubectl') {
      steps {
        script {
          def output = readJSON file: 'kube-output.json'
          def token = output.cluster_token.value
          def cert = output.cluster_CA.value
          def ec2_endpoint = output.kubeconfig.value

          writeFile file: 'kubeconfig.yml', text: """
apiVersion: v1
clusters:
- cluster:
    server: https://${ec2_endpoint}
    certificate-authority-data: ${cert}
  name: custom-eks
contexts:
- context:
    cluster: custom-eks
    user: admin
  name: custom-context
current-context: custom-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    token: ${token}
"""
        }
      }
    }

    stage('Run Ansible Playbook') {
      steps {
        dir('infra/ansible') {
          sshagent(["$SSH_KEY_ID"]) {
            script {
              def output = readJSON file: '../../kube-output.json'
              def instance_ip = output.instance_public_ip.value
              sh 'ansible-playbook -i inventory.ini playbook.yml --extra-vars "docker_image=${DOCKER_IMAGE} host_port=${HOST_PORT} container_port=${CONTAINER_PORT} instance_ip=${instance_ip}"'
            }
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('app') {
          sh 'docker build -t MAV-app:latest .'
        }
      }
    }

    stage('Push to Docker Desktop') {
      steps {
        script {
          sh '''
            docker tag MAV-app:latest wealliam/maverick-reg/MAV-app:latest
            docker push wealliam/maverick-reg/MAV-app:latest
          '''
        }
      }
    }

    stage('Deploy to EKS') {
      steps {
        sh'''
        KUBECONFIG=kubeconfig.yml kubectl apply -f app/deployment.yaml
        KUBECONFIG=kubeconfig.yml kubectl apply -f app/service.yaml
        KUBECONFIG=kubeconfig.yml kubectl apply -f ngnix/ingress.yaml
        KUBECONFIG=kubeconfig.yml kubectl rollout status deployment MAV-app
        KUBECONFIG=kubeconfig.yml kubectl get pods
             '''
      }
    }

    stage('Cleanup Docker') {
      steps {
        script {
          sh 'docker container prune -f'
          sh 'docker image prune -f'
          sh 'docker rmi -f MAV-app:latest || true'
          sh 'docker rmi -f wealliam/maverick-reg/MAV-app:latest || true'
        }
      }
    }
  }

  post {
    success {
      echo "Deployment to EKS successful!"
    }
    failure {
      echo "Pipeline failed. Check logs."
    }
  }
}
